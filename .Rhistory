}
change <- -1
while (change != 0){
before_hpd <- hpd_vertices
before_boundary <- copy(boundary_hpd_vertices)
for (i in before_boundary){
all_neighbours <- adjacent_vertices(all_graph, i, mode = 'all')[[1]]
compare_vertices <- union(complement_vertices, removed_vertices)
hpd_neighbours <- setdiff(all_neighbours, compare_vertices)
other_neighbours <- setdiff(all_neighbours, hpd_neighbours)
other_neighbours_graph <- induced_subgraph(all_graph, other_neighbours)
other_neighbours_graph <- delete_edges(other_neighbours_graph,E(other_neighbours_graph)[E(other_neighbours_graph)$color == 'blue'])
if (isempty(hpd_neighbours)) next
else if (is_connected(induced_subgraph(all_graph, hpd_neighbours)) & is_connected(other_neighbours_graph)){
removed_vertices <- c(removed_vertices,i)
hpd_vertices <- setdiff(hpd_vertices,i)
boundary_hpd_vertices <- setdiff(boundary_hpd_vertices,i)
for (j in hpd_neighbours){
if (E(all_graph, c(min(i,j),max(i,j)))$color == 'red') boundary_hpd_vertices <- union(boundary_hpd_vertices, j)
else{
h <- intersect(adjacent_vertices(all_graph, j, mode = 'all')[[1]], union(complement_vertices, removed_vertices))
for (k in h){
if (E(all_graph, c(min(k,j), max(k,j)))$color == 'red') {
boundary_hpd_vertices <- union(boundary_hpd_vertices, j)
break
}
}
}
}
}
else next
}
change <- length(setdiff(before_hpd,hpd_vertices))
}
change <- -1
while (change != 0){
before_hpd <- hpd_vertices
before_boundary <- copy(boundary_hpd_vertices)
for (i in before_boundary){
all_neighbours <- adjacent_vertices(all_graph, i, mode = 'all')[[1]]
compare_vertices <- union(complement_vertices, removed_vertices)
hpd_neighbours <- setdiff(all_neighbours, compare_vertices)
other_neighbours <- setdiff(all_neighbours, hpd_neighbours)
other_neighbours_graph <- induced_subgraph(all_graph, other_neighbours)
other_neighbours_graph <- delete_edges(other_neighbours_graph,E(other_neighbours_graph)[E(other_neighbours_graph)$color == 'blue'])
if (isempty(hpd_neighbours)) next
else if (is_connected(induced_subgraph(all_graph, hpd_neighbours)) & is_connected(other_neighbours_graph)){
removed_vertices <- c(removed_vertices,i)
hpd_vertices <- setdiff(hpd_vertices,i)
boundary_hpd_vertices <- setdiff(boundary_hpd_vertices,i)
for (j in hpd_neighbours){
if (E(all_graph, c(min(i,j),max(i,j)))$color == 'red') boundary_hpd_vertices <- union(boundary_hpd_vertices, j)
else{
h <- intersect(adjacent_vertices(all_graph, j, mode = 'all')[[1]], union(complement_vertices, removed_vertices))
for (k in h){
if (E(all_graph, c(min(k,j), max(k,j)))$color == 'red') {
boundary_hpd_vertices <- union(boundary_hpd_vertices, j)
break
}
}
}
}
}
else next
}
change <- length(setdiff(before_hpd,hpd_vertices))
}
change <- -1
while (change != 0){
before_hpd <- hpd_vertices
before_boundary <- copy(boundary_hpd_vertices)
for (i in before_boundary){
all_neighbours <- adjacent_vertices(all_graph, i, mode = 'all')[[1]]
compare_vertices <- union(complement_vertices, removed_vertices)
hpd_neighbours <- setdiff(all_neighbours, compare_vertices)
other_neighbours <- setdiff(all_neighbours, hpd_neighbours)
other_neighbours_graph <- induced_subgraph(all_graph, other_neighbours)
other_neighbours_graph <- delete_edges(other_neighbours_graph,E(other_neighbours_graph)[E(other_neighbours_graph)$color == 'blue'])
if (isempty(hpd_neighbours)) next
else if (is_connected(induced_subgraph(all_graph, hpd_neighbours)) & is_connected(other_neighbours_graph)){
removed_vertices <- c(removed_vertices,i)
hpd_vertices <- setdiff(hpd_vertices,i)
boundary_hpd_vertices <- setdiff(boundary_hpd_vertices,i)
for (j in hpd_neighbours){
if (E(all_graph, c(min(i,j),max(i,j)))$color == 'red') boundary_hpd_vertices <- union(boundary_hpd_vertices, j)
else{
h <- intersect(adjacent_vertices(all_graph, j, mode = 'all')[[1]], union(complement_vertices, removed_vertices))
for (k in h){
if (E(all_graph, c(min(k,j), max(k,j)))$color == 'red') {
boundary_hpd_vertices <- union(boundary_hpd_vertices, j)
break
}
}
}
}
}
else next
}
change <- length(setdiff(before_hpd,hpd_vertices))
}
source('erosion_new.R')
erosion2(HPD,complement)
e <- erosion2(HPD,complement)
plot(e[[1]])
plot(e[[2]][1])
e[[2]][1]
plot(induced_subgraph(e[[1]],e[[2]][1])
)
e[[1]]
source('erosion_new.R')
e <- erosion2(HPD, complement)
graph <- e[[1]]
HPD_vertices <- e[[2]][[1]]
plot(as.undirected(induced_subgraph(graph,HPD_vertices)), vertex.size = 1)
plot(induced_subgraph(graph, HPD_vertices), vertex.size = 1)
rglplot(induced_subgraph(graph, HPD_vertices), vertex.size = 1)
for (i in HPD_vertices){
pt=all_cells[[i]][,xx]
pt[,1]=pt[,1]*diff(f1)+f1[1]
pt[,2]=pt[,2]*diff(f2)+f2[1]
xleft <- pt[1,1]; ybottom <- pt[1,2]; xright <- pt[2,1]; ytop <- pt[2,2]
rect(xleft, ybottom, xright, ytop, density = 11, angle = 45, col = 'green')
}
n <- 100000
sigma <- matrix(c(10,3,3,2),2,2)
mu <- c(0,0)
mvrn_points1 <- mvrnorm(n,mu,Sigma = sigma)
# dev.new()
plot(mvrn_points1, xlab = 'x', ylab = 'y')
mvrn_points2 <- mvrnorm(n,mu,Sigma = sigma)
#Implement HPD sets estimation
train.sim <- mvrn_points1
test.sim <- mvrn_points2
conv_training <- convert.marginal(train.sim,train.sim)
conv_testing <- convert.marginal(train.sim,test.sim)
vector_tau = seq(0.5,0.01,len=10)
alpha = 0.1
out=cred.est2(test=conv_testing,train.sim=train.sim,train=conv_training,tau=vector_tau,alpha=alpha,p.alpha=0.95)
k <- out$n.tree
HPD <- out$cre.set
all_cells <- out$uni_space
complement <- all_cells[(length(HPD)+1):k]
xx <- c(1,2)
f1=range(mvrn_points1[,xx[1]]); f2=range(mvrn_points1[,xx[2]])
for (i in 1:length(HPD)){
pt=all_cells[[i]][,xx]
pt[,1]=pt[,1]*diff(f1)+f1[1]
pt[,2]=pt[,2]*diff(f2)+f2[1]
xleft <- pt[1,1]; ybottom <- pt[1,2]; xright <- pt[2,1]; ytop <- pt[2,2]
rect(xleft, ybottom, xright, ytop, density = 20, angle = 45, col = 'red')
}
#Plot complement sets in blue
for (i in (length(HPD)+1):k){
pt=all_cells[[i]][,xx]
pt[,1]=pt[,1]*diff(f1)+f1[1]
pt[,2]=pt[,2]*diff(f2)+f2[1]
xleft <- pt[1,1]; ybottom <- pt[1,2]; xright <- pt[2,1]; ytop <- pt[2,2]
rect(xleft, ybottom, xright, ytop, density = 20, angle = 45, col = 'blue')
}
e <- erosion2(HPD, complement)
all_graph <- e[[1]]
HPD_vertices <- e[[2]][[1]]
HPD_vertices
library("rgl")
source('funcode.R')
source('erosion_new.R')
ball <- function(n,R){
sigma <- R/2
theta <- runif(n,min = 0, max = 2*pi)
phi <- acos(1-2*runif(n,min = 0, max = 1))
r <- abs(rnorm(n,0,sigma^2))
x <- r * sin(phi)*cos(theta)
y <- r * sin(phi)*sin(theta)
z <- r * cos(phi)
points <- array(data = NA,dim = c(n,3))
points[,1] <- x
points[,2] <- y
points[,3] <- z
return (points)
}
ball_points1 <- ball(n,R)
# plot3d(ball_points1[,1],ball_points1[,2],ball_points1[,3])
ball_points2 <- ball(n,R)
train.sim <- ball_points1
test.sim <- ball_points2
conv_training <- convert.marginal(train.sim,train.sim)
conv_testing <- convert.marginal(train.sim,test.sim)
vector_tau = seq(0.5,0.01,len=10)
alpha = 0.3
out=cred.est2(test=conv_testing,train.sim=train.sim,train=conv_training,tau=vector_tau,alpha=alpha,p.alpha=0.95)
k <- out$n.tree
HPD <- out$cre.set
all_cells <- out$uni_space
complement <- all_cells[(length(HPD)+1):k]
e <- erosion2(HPD, complement)
graph <- e[[1]]
HPD_vertices <- e[[2]][[1]]
rglplot(induced_subgraph(graph,HPD_vertices), vertex.size = 1)
library("rgl")
source('funcode.R')
source('erosion_new.R')
#Simulate points in a 3d torus, points are more denser around the circle in the middle
n <- 100000
R <- 1
#In this simulation we deliberately make the points denser around the center uniformly in the sense that the points are uniformly distributed on the every sphere surface
ball <- function(n,R){
sigma <- R/2
theta <- runif(n,min = 0, max = 2*pi)
phi <- acos(1-2*runif(n,min = 0, max = 1))
r <- abs(rnorm(n,0,sigma^2))
x <- r * sin(phi)*cos(theta)
y <- r * sin(phi)*sin(theta)
z <- r * cos(phi)
points <- array(data = NA,dim = c(n,3))
points[,1] <- x
points[,2] <- y
points[,3] <- z
return (points)
}
ball_points1 <- ball(n,R)
# plot3d(ball_points1[,1],ball_points1[,2],ball_points1[,3])
ball_points2 <- ball(n,R)
train.sim <- ball_points1
test.sim <- ball_points2
conv_training <- convert.marginal(train.sim,train.sim)
conv_testing <- convert.marginal(train.sim,test.sim)
vector_tau = seq(0.5,0.01,len=10)
alpha = 0.1
out=cred.est2(test=conv_testing,train.sim=train.sim,train=conv_training,tau=vector_tau,alpha=alpha,p.alpha=0.95)
k <- out$n.tree
HPD <- out$cre.set
all_cells <- out$uni_space
complement <- all_cells[(length(HPD)+1):k]
e <- erosion2(HPD, complement)
graph <- e[[1]]
HPD_vertices <- e[[2]][[1]]
rglplot(induced_subgraph(graph,HPD_vertices), vertex.size = 1)
library("rgl")
source('funcode.R')
source('erosion_new.R')
##Simulate a "eight-shape" region
n <- 100000
r <- 0.1
R <- 1
eight <- function(n,r,R){
sigma <- (R-r)/4
theta1 <- runif(n/2,min = 0, max = 2*pi)
theta2 <- runif(n/2, min = 0, max = 2*pi)
n1 <- rnorm(n/2,0,sigma^2)
n2 <- rnorm(n/2,0,sigma^2)
left_torus <- array(,dim = c(n/2,2))
left_torus[,1] <- ((R + r)/2 + n1)*cos(theta1)-0.55
left_torus[,2] <- ((R + r)/2 + n1)*sin(theta1)
right_torus <- array(,dim = c(n/2,2))
right_torus[,1] <- ((R + r)/2 + n2)*cos(theta2)+0.55
right_torus[,2] <- ((R + r)/2 + n2)*sin(theta2)
torus_data <- rbind(left_torus,right_torus)
return(torus_data)
}
eight_points1 <- eight(n,r,R)
#Visualization of the eight-shape object
plot(eight_points1, xlab = 'x', ylab = 'y')
eight_points2 <- eight(n,r,R)
#Implement HPD sets estimation
train.sim <- eight_points1
test.sim <- eight_points2
conv_training <- convert.marginal(train.sim,train.sim)
conv_testing <- convert.marginal(train.sim,test.sim)
vector_tau = seq(0.5,0.01,len=10)
alpha = 0.05
out=cred.est2(test=conv_testing,train.sim=train.sim,train=conv_training,tau=vector_tau,alpha=alpha,p.alpha=0.95)
k <- out$n.tree
HPD <- out$cre.set
all_cells <- out$uni_space
complement <- all_cells[(length(HPD)+1):k]
##Visualization of the estimated HPD sets
#Plot HPD sets in red
# dev.new()
xx <- c(1,2)
f1=range(eight_points1[,xx[1]]); f2=range(eight_points1[,xx[2]])
for (i in 1:length(HPD)){
pt=all_cells[[i]][,xx]
pt[,1]=pt[,1]*diff(f1)+f1[1]
pt[,2]=pt[,2]*diff(f2)+f2[1]
xleft <- pt[1,1]; ybottom <- pt[1,2]; xright <- pt[2,1]; ytop <- pt[2,2]
rect(xleft, ybottom, xright, ytop, density = 11, angle = 45, col = 'red')
}
#Plot complement sets in blue
for (i in (length(HPD)+1):k){
pt=all_cells[[i]][,xx]
pt[,1]=pt[,1]*diff(f1)+f1[1]
pt[,2]=pt[,2]*diff(f2)+f2[1]
xleft <- pt[1,1]; ybottom <- pt[1,2]; xright <- pt[2,1]; ytop <- pt[2,2]
rect(xleft, ybottom, xright, ytop, density = 11, angle = 45, col = 'blue')
}
##Apply erosion method on the multivariate normal data
e <- erosion2(HPD, complement)
graph <- e[[1]]
HPD_vertices <- e[[2]][[1]]
plot(as.undirected(induced_subgraph(graph,HPD_vertices)), vertex.size = 1)
rglplot(induced_subgraph(graph, HPD_vertices), vertex.size = 1)
library("rgl")
source('funcode.R')
source('erosion_new.R')
#Simulate points in a 3d torus, points are more denser around the circle in the middle
n <- 100000
R <- 1
#In this simulation we deliberately make the points denser around the center uniformly in the sense that the points are uniformly distributed on the every sphere surface
ball <- function(n,R){
sigma <- R/2
theta <- runif(n,min = 0, max = 2*pi)
phi <- acos(1-2*runif(n,min = 0, max = 1))
r <- abs(rnorm(n,0,sigma^2))
x <- r * sin(phi)*cos(theta)
y <- r * sin(phi)*sin(theta)
z <- r * cos(phi)
points <- array(data = NA,dim = c(n,3))
points[,1] <- x
points[,2] <- y
points[,3] <- z
return (points)
}
ball_points1 <- ball(n,R)
# plot3d(ball_points1[,1],ball_points1[,2],ball_points1[,3])
ball_points2 <- ball(n,R)
train.sim <- ball_points1
test.sim <- ball_points2
conv_training <- convert.marginal(train.sim,train.sim)
conv_testing <- convert.marginal(train.sim,test.sim)
vector_tau = seq(0.5,0.01,len=10)
alpha = 0.1
out=cred.est2(test=conv_testing,train.sim=train.sim,train=conv_training,tau=vector_tau,alpha=alpha,p.alpha=0.95)
k <- out$n.tree
HPD <- out$cre.set
all_cells <- out$uni_space
complement <- all_cells[(length(HPD)+1):k]
e <- erosion2(HPD, complement)
graph <- e[[1]]
HPD_vertices <- e[[2]][[1]]
rglplot(induced_subgraph(graph,HPD_vertices), vertex.size = 1)
library("rgl")
source('funcode.R')
source('erosion_new.R')
#Simulate points in a 3d torus, points are more denser around the circle in the middle
n <- 100000
R <- 1
#In this simulation we deliberately make the points denser around the center uniformly in the sense that the points are uniformly distributed on the every sphere surface
ball <- function(n,R){
sigma <- R/2
theta <- runif(n,min = 0, max = 2*pi)
phi <- acos(1-2*runif(n,min = 0, max = 1))
r <- abs(rnorm(n,0,sigma^2))
x <- r * sin(phi)*cos(theta)
y <- r * sin(phi)*sin(theta)
z <- r * cos(phi)
points <- array(data = NA,dim = c(n,3))
points[,1] <- x
points[,2] <- y
points[,3] <- z
return (points)
}
ball_points1 <- ball(n,R)
# plot3d(ball_points1[,1],ball_points1[,2],ball_points1[,3])
ball_points2 <- ball(n,R)
train.sim <- ball_points1
test.sim <- ball_points2
conv_training <- convert.marginal(train.sim,train.sim)
conv_testing <- convert.marginal(train.sim,test.sim)
vector_tau = seq(0.5,0.01,len=10)
alpha = 0.2
out=cred.est2(test=conv_testing,train.sim=train.sim,train=conv_training,tau=vector_tau,alpha=alpha,p.alpha=0.95)
k <- out$n.tree
HPD <- out$cre.set
all_cells <- out$uni_space
complement <- all_cells[(length(HPD)+1):k]
e <- erosion2(HPD, complement)
graph <- e[[1]]
HPD_vertices <- e[[2]][[1]]
rglplot(induced_subgraph(graph,HPD_vertices), vertex.size = 1)
rglplot(induced_subgraph(graph,HPD_vertices), vertex.size = 1)
rglplot(induced_subgraph(graph,HPD_vertices), vertex.size = 1)
plot(induced_subgraph(graph,HPD_vertices), vertex.size = 1)
library("rgl")
source('funcode.R')
source('erosion_new.R')
##Simulate a "eight-shape" region
n <- 100000
r <- 0.1
R <- 1
eight <- function(n,r,R){
sigma <- (R-r)/4
theta1 <- runif(n/2,min = 0, max = 2*pi)
theta2 <- runif(n/2, min = 0, max = 2*pi)
n1 <- rnorm(n/2,0,sigma^2)
n2 <- rnorm(n/2,0,sigma^2)
left_torus <- array(,dim = c(n/2,2))
left_torus[,1] <- ((R + r)/2 + n1)*cos(theta1)-0.55
left_torus[,2] <- ((R + r)/2 + n1)*sin(theta1)
right_torus <- array(,dim = c(n/2,2))
right_torus[,1] <- ((R + r)/2 + n2)*cos(theta2)+0.55
right_torus[,2] <- ((R + r)/2 + n2)*sin(theta2)
torus_data <- rbind(left_torus,right_torus)
return(torus_data)
}
eight_points1 <- eight(n,r,R)
#Visualization of the eight-shape object
plot(eight_points1, xlab = 'x', ylab = 'y')
eight_points2 <- eight(n,r,R)
#Implement HPD sets estimation
train.sim <- eight_points1
test.sim <- eight_points2
conv_training <- convert.marginal(train.sim,train.sim)
conv_testing <- convert.marginal(train.sim,test.sim)
vector_tau = seq(0.5,0.01,len=10)
alpha = 0.05
out=cred.est2(test=conv_testing,train.sim=train.sim,train=conv_training,tau=vector_tau,alpha=alpha,p.alpha=0.95)
k <- out$n.tree
HPD <- out$cre.set
all_cells <- out$uni_space
complement <- all_cells[(length(HPD)+1):k]
##Visualization of the estimated HPD sets
#Plot HPD sets in red
# dev.new()
xx <- c(1,2)
f1=range(eight_points1[,xx[1]]); f2=range(eight_points1[,xx[2]])
for (i in 1:length(HPD)){
pt=all_cells[[i]][,xx]
pt[,1]=pt[,1]*diff(f1)+f1[1]
pt[,2]=pt[,2]*diff(f2)+f2[1]
xleft <- pt[1,1]; ybottom <- pt[1,2]; xright <- pt[2,1]; ytop <- pt[2,2]
rect(xleft, ybottom, xright, ytop, density = 11, angle = 45, col = 'red')
}
#Plot complement sets in blue
for (i in (length(HPD)+1):k){
pt=all_cells[[i]][,xx]
pt[,1]=pt[,1]*diff(f1)+f1[1]
pt[,2]=pt[,2]*diff(f2)+f2[1]
xleft <- pt[1,1]; ybottom <- pt[1,2]; xright <- pt[2,1]; ytop <- pt[2,2]
rect(xleft, ybottom, xright, ytop, density = 11, angle = 45, col = 'blue')
}
##Apply erosion method on the multivariate normal data
e <- erosion2(HPD, complement)
graph <- e[[1]]
HPD_vertices <- e[[2]][[1]]
plot(as.undirected(induced_subgraph(graph,HPD_vertices)), vertex.size = 1)
rglplot(induced_subgraph(graph, HPD_vertices), vertex.size = 1)
#Visualization of the eight-shape object
plot(eight_points1, xlab = 'x', ylab = 'y')
xx <- c(1,2)
f1=range(eight_points1[,xx[1]]); f2=range(eight_points1[,xx[2]])
for (i in 1:length(HPD)){
pt=all_cells[[i]][,xx]
pt[,1]=pt[,1]*diff(f1)+f1[1]
pt[,2]=pt[,2]*diff(f2)+f2[1]
xleft <- pt[1,1]; ybottom <- pt[1,2]; xright <- pt[2,1]; ytop <- pt[2,2]
rect(xleft, ybottom, xright, ytop, density = 11, angle = 45, col = 'red')
}
#Plot complement sets in blue
for (i in (length(HPD)+1):k){
pt=all_cells[[i]][,xx]
pt[,1]=pt[,1]*diff(f1)+f1[1]
pt[,2]=pt[,2]*diff(f2)+f2[1]
xleft <- pt[1,1]; ybottom <- pt[1,2]; xright <- pt[2,1]; ytop <- pt[2,2]
rect(xleft, ybottom, xright, ytop, density = 11, angle = 45, col = 'blue')
}
for (i in HPD_vertices){
pt=all_cells[[i]][,xx]
pt[,1]=pt[,1]*diff(f1)+f1[1]
pt[,2]=pt[,2]*diff(f2)+f2[1]
xleft <- pt[1,1]; ybottom <- pt[1,2]; xright <- pt[2,1]; ytop <- pt[2,2]
rect(xleft, ybottom, xright, ytop, density = 11, angle = 45, col = 'green')
}
library("rgl")
source('funcode.R')
source('erosion_new.R')
#Simulate points in a 3d torus, points are more denser around the circle in the middle
n <- 100000
R <- 1
#In this simulation we deliberately make the points denser around the center uniformly in the sense that the points are uniformly distributed on the every sphere surface
ball <- function(n,R){
sigma <- R/2
theta <- runif(n,min = 0, max = 2*pi)
phi <- acos(1-2*runif(n,min = 0, max = 1))
r <- abs(rnorm(n,0,sigma^2))
x <- r * sin(phi)*cos(theta)
y <- r * sin(phi)*sin(theta)
z <- r * cos(phi)
points <- array(data = NA,dim = c(n,3))
points[,1] <- x
points[,2] <- y
points[,3] <- z
return (points)
}
ball_points1 <- ball(n,R)
# plot3d(ball_points1[,1],ball_points1[,2],ball_points1[,3])
ball_points2 <- ball(n,R)
train.sim <- ball_points1
test.sim <- ball_points2
conv_training <- convert.marginal(train.sim,train.sim)
conv_testing <- convert.marginal(train.sim,test.sim)
vector_tau = seq(0.5,0.01,len=10)
alpha = 0.2
out=cred.est2(test=conv_testing,train.sim=train.sim,train=conv_training,tau=vector_tau,alpha=alpha,p.alpha=0.95)
k <- out$n.tree
HPD <- out$cre.set
all_cells <- out$uni_space
complement <- all_cells[(length(HPD)+1):k]
e <- erosion2(HPD, complement)
graph <- e[[1]]
HPD_vertices <- e[[2]][[1]]
plot(induced_subgraph(graph,HPD_vertices), vertex.size = 1)
rglplot(induced_subgraph(graph,HPD_vertices), vertex.size = 1)
